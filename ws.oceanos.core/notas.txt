969743082@tmn.pt m4sTAehp4f


######
Blogs
######
https://vaughnvernon.co/?p=401
http://blog.eigengo.com/blog_posts/akka-spray
http://letitcrash.com/tagged/spotlight22
http://hseeberger.github.io/

###LINKS###
https://github.com/mtnygard/devs
https://github.com/bdelacretaz/OSGi-for-mere-mortals
https://github.com/Crossing-Tech/akka-osgi-sample

#######
Design Goals
Make an recursive composition of actor systems.
If we define an actor system as a concrete message flow, among actors we want to combine message flows in a
way to obtain a component that behaves as the same unit of computation, with the same properties, an actor.

- Petri nets as the control flow of meta-actors
-- They have state, they have processing, they define behaviour for each message.
-- they allow the contruction of meta-actors, with the wiring of individual actors
-- they represent a network of stream flows, and make the wiring explicit

-The flowgraph is a a network build of capabilities.

-the events are messages, or case classes flowing in the system
-the process domain logic is in the actors
-the process selection logic is in the petri net actor and defined by a "compilation" of the flowgraph
into a petrinet with

-using event source to log the events and replay the system state.


#######
Design Decisions:
- Decided to model petri net state as a sepcific class that agregates all the control logic of the coordination
instead of creating a complicating structure of places and transitions modeled as actors, because this complexity
turned out to not be justified. Petri nets can be seen as a distributed control structure, but a set of cooperating actors
requires transactional state transitions that adds a unecessary overhead for simple cases, and the number os messages is much
greater when places are modeled as actors. 
 

### 


Implementations:
- build a network of properties
- serviceprops represents a normal service
- sourceprops represents a service that receive messages into the context. The source of the messages can be 
context itself acting as a proxy for an external client or another client that obtained this reference.
- sinkprops represents a service that sends messages and act as a client for another reference.

??? How about modelling event receivers as places, and configure event senders with a context?

#######

0- Processing
1- Storage
2- Communication

I-Create more Actors.
II- Send messages to actors it knows.
III-Define what to do with the next message.


##Turing Model
Global Space
Global Time
Global Memory

#Actor Model
Local Time
Local Space
Local Memory
